{

    "nav":{
        "home":"Inicio",
        "information":"Equipo Frontend",
        "team":"Equipo",
        "web":"Web",
        "incidents":"Incidencias",
        "library":"Librerías",
        "tools":"Herramientas"
    },
    "about":{
        "tittle":"Información útil",
        "init_text":"En este apartado vamos a dar información que puede ser útil en un futuro"
    },
    "home":{
        "tittle":"¡Bienvenido a nuestro sitio web creado con la tecnología Single-SPA Microfrontends!",
        "init":"En este innovador sitio, hemos adoptado la arquitectura de microfrontends utilizando Single SPA para brindarte una experiencia web moderna y fluida.",
        "box":" ¿Te has preguntado cómo diferentes aplicaciones independientes pueden unirse para formar un sitio coherente y colaborativo? Bueno, eso es exactamente lo que hemos logrado aquí. Nuestro enfoque en microfrontends nos permite desarrollar, desplegar y mantener cada parte de la aplicación de forma independiente, lo que nos proporciona una mayor flexibilidad y facilidad de desarrollo. Cada microfrontend es una pequeña aplicación independiente que puede ser escrita en diferentes frameworks o tecnologías, y sin embargo, todas trabajan juntas sin problemas en este sitio web.",
        "final":"Con Single SPA, hemos logrado una navegación fluida entre las distintas secciones del sitio, sin que tengas que esperar a que se cargue una página completamente nueva. Además, esto significa que cuando realicemos mejoras o actualizaciones en una parte de la aplicación, no afectará negativamente otras partes, lo que se traduce en un sitio más robusto y fácil de mantener."
    },
    "web": {
        "tittle": "Desarrollo De la Web",
        "first": "Primeros pasos",
        "start_text": "¿Qué es el enfoque de microfrontends y Single-spa? En lugar de construir una aplicación monolítica, donde todos los componentes están fuertemente acoplados, adoptamos un enfoque modular al dividir nuestra aplicación en múltiples microfrontends independientes. Cada microfrontend es responsable de una parte específica de la aplicación y se desarrolla, prueba y despliega de manera independiente. Esto nos permite aprovechar las ventajas de diferentes tecnologías y equipos, promoviendo la colaboración y la eficiencia.",
        "next_text": "Single-spa es una biblioteca JavaScript que nos ayuda a integrar y coordinar estos microfrontends en una única aplicación. Actúa como un orquestador, permitiéndonos cargar y descargar dinámicamente los módulos según sea necesario, lo que optimiza el rendimiento y mejora la experiencia del usuario.",
        "stencil": {
          "init_text": "Stencil JS es un framework de desarrollo web de código abierto creado por el equipo de Ionic. Su objetivo principal es facilitar la creación de componentes web reutilizables y de alto rendimiento. Stencil JS se encuentra enfocado en desarrollar aplicaciones web y componentes web utilizando las últimas características y estándares de la web moderna.",
          "tittle_isntall_stencil": "Instalación y creación de un proyecto",
          "li_first_step": " Asegúrate de tener Node.js instalado en tu computadora. Puedes descargar Node.js desde el sitio web oficial:",
          "li_second_step": "Abre una terminal o línea de comandos en tu ordenador.",
          "li_third_step": "Instala el CLI de Stencil JS de forma global ejecutando el siguiente comando:",
          "text_create_proyect": "  Una vez que hayas instalado el CLI de Stencil.js, puedes crear un nuevo proyecto ejecutando el siguiente comando:",
          "text_create_webcomponent": "Para crear nuevos componentes web puedes ejecutar el siguiente comando:",
          "text_ejecute_stencil": "Para ejecutar el proyecto Stencil js ejecute en la consola:",
          "text_public_npm": "Una vez se tengan todos los componentes web desarrollados, solo faltaría publicarlos en npm para poder utilizarlos en otras tecnologías web cómo Angular, React o Vue.",
          "text_public_code_npm": "Para publicarlos hay que registrarse en la página oficial de NPM y una vez registrado ejecutar los siguientes comandos:"
        },
        "single_spa": {
          "init_text": "Single-spa es una biblioteca de JavaScript que permite crear aplicaciones web de una sola página (SPA) a partir de múltiples aplicaciones independientes o microfrontends. La idea central de Single-spa es que cada microfrontend puede estar desarrollado con un marco o tecnología diferente, como Angular, React, Vue.js o cualquier otra de tu elección.",
          "text_create_root": "Para empezar a crear tu aplicación microfrontend Single-SPA es a partir del siguiente comando:",
          "text_finish": "Dentro de este comando tiene varias configuraciones que iremos viendo para poder crear cualquier microfrontend en React, Vue o Angular."
        },
        "root": {
          "init_text": "La root app actúa como un \"contenedor\" que controla la navegación, carga y descarga de los microfrontends secundarios según sea necesario. También puede ser responsable de la autenticación, el enrutamiento y la gestión del estado global de la aplicación. En resumen, la root app establece el contexto y la estructura general de tu aplicación de microfrontends, permitiendo que las aplicaciones secundarias se integren y funcionen de manera conjunta para brindar una experiencia de usuario cohesiva.",
          "ol_text": "Al ejecutar el comando \"create-single-spa\" hay que seleccionar una serie de opciones para que se cree correctamente la aplicación:",
          "li_first_step": "Hay que seleccionar el directorio en el que se cree la aplicación.",
          "li_second_step": "Luego hay que seleccionar la tercera opción, la que dice \"single-spa root config\"",
          "li_third_step": "Después se selecciona la package manager que se desea utilizar, en este caso yo he utilizado npm.",
          "li_for_step": "También da la opción de poder utilizar Typescript, para esta aplicación no lo hemos utilizado en la aplicación root.",
          "li_five_step": " Por último, se selecciona \"yes\" para utilizar single-spa Layout Engine",
          "finish_ol": "Y listo, ya se habrá generado la aplicación root del proyecto. Ahora hay que hacer algunas modificaciones para dejar lista la aplicación.",
          "text_first_modification": " La primera modificación que haremos es editar el importmap del archivo \"index.ejs\" para poder mover todas las importaciones de los microfrontends a un archivo .json aparte y sea más fácil manejarlo y editarlo. Entonces lo primero que haremos es crear este archivo .json que lo llamaremos \"importmap.json\" en el directorio src. Para empezar tendrá que tener la siguiente estructura ya que aún no hemos añadido un microfrontend.",
          "text_first_modification_2": "Luego, lo que tenemos que editar el archivo \"index.ejs\" para enlazar el archivo \"importmap.json\" que hemos creado con la aplicación. Para ello hay que sustituir la estructura que te da por defecto (línea 47) por esta línea de código:",
          "text_first_modification_3": "Por último, hay que modificar el archivo \"webpack.config.js\" para que todo funcione correctamente y esté enlazado el \"importmap.json\". Esta modificación tan solo es agregar un plugin a la configuración.",
          "text_second_modification": "Ahora, la segunda modificación que haremos es agregar nuestro paquete de Web Components. Lo haremos a través del paquete npm que hemos creado anteriormente con un enlace cdn. Solo hay que agregar una línea de código en el archivo \"index.ejs\" y todos los microfrontends podrán utilizar cualquier web component que esté disponible. (No tener en cuenta la versión del paquete NPM de la imagen)",
          "text_second_modification_1": "Con esto ya tendremos a punto nuestra aplicación root y solo quedaría crear los microfrontends y añadirlos al archivo \"importmap.json\". Para ejecutar el proyecto hay que utilizar el siguiente comando (puede dar conflicto de puertos ya que se ejecuta en localhost:9000):"
        },
    
        "react": {
          "text_init": "La combinación de React con Single-SPA permite desarrollar microfrontends usando React como el framework principal para cada microfrontend. Cada microfrontend React puede ser desarrollado de manera independiente por equipos separados, lo que facilita la colaboración y el desarrollo iterativo. Luego, estas partes individuales se pueden compilar y empaquetar de manera que se integren perfectamente en la aplicación general gestionada por Single-spa.",
          "text_ejecute_comand": "Ejecute el siguiente comando para crear un microfrontend React con las dependencias y paquetes que se requieren en el framework Single-SPA.",
          "text_finish": "Esto generará un proyecto con un componente básico de React el cúal es muy fácil modificar. Para está web se ha utilizado React para desarrollar la barra de navegación entre las diferentes pantallas. Para ejecutar el microfrontend React hay que poner el siguiente comando en la terminal:"
        },
        "angular": {
          "text_init": "La combinación de Angular con Single-spa permite desarrollar microfrontends usando Angular como el framework principal para cada módulo. Cada microfrontend Angular puede ser desarrollado de manera independiente por equipos separados, lo que facilita la colaboración y la escalabilidad en proyectos grandes.",
          "text_config_main": "Para configurar correctamente un microfrontend de Angular, una vez creado el proyecto tienes que abrir el archivo \"main.single-spa.ts\" y te tiene que quedar tal cual la imagen. Borrando las líneas donde den error por la importación de \"enviroment\".",
          "text_route": "Después tenemos que añadir al archivo \"app-routing.module.ts\" el módulo \"empty-route\" que se genera con el microfrontend. El archivo tiene que quedar tal cual la imagen."
        },
        "vue": {
          "text_init": "Vue.js en Single-spa para microfrontends permite construir aplicaciones web modulares y escalables con un rendimiento óptimo. Vue.js se integra sin problemas, facilitando el desarrollo y la colaboración en equipos mientras  garantiza una carga eficiente de módulos cuando sea necesario. Con el siguiente comando podremos crear una aplicación microfrontend de Vue.",
          "text_edit_config": "  Una vez creado el proyecto Vue, hay que editar el archivo \"vue.config.js\" para que pueda funcionar correctamente nuestra aplicación. Lo único que hay que hacer es añadir una configuración de WebPack para que pueda visualizarse el microfrontend sin problemas. Se añadiría el siguiente código:",
          "text_finish_edit": "  Después de esto, tu aplicación Vue ya funciona correctamente y puedes editar el proyecto como si fuera una app Vue independiente.",
          "text_ejecute_proyect": "Para ejecutar el microfrontend y poder utilizarlo en la aplicación \"root\", se ejecutaría con el siguiente comando:"
        }
      },
      "libraries":{
        "tittle":"Librerías y tecnologías",
        "init_text":"En el proceso de construcción de esta página web, hemos empleado una serie de librerías y tecnologías modernas que nos han permitido crear una experiencia de usuario excepcional y un diseño atractivo. Estas herramientas y recursos son esenciales para el funcionamiento y la apariencia de nuestra plataforma.",
        "taduccion_tittle":"Librerías de traducción i18n"
      },
      "tools":{
        "tittle":"Herramientas",
        "text_init":"En este apartado vamos a ver las diferentes herramientas que he utilizado para poder desarrollar la web.",
        "git_hub":{
          "tittle":"GitHub",
          "text":"GitHub es una plataforma de desarrollo colaborativo que permite a los equipos de programadores gestionar proyectos de software de manera eficiente. Permite el control de versiones, seguimiento de problemas y facilita la colaboración en código fuente, todo en un entorno en línea accesible desde cualquier lugar.",
          "text_2":"En este caso, se ha almacenado todo el código en un repositorio para poder acceder fácilmente y poder conctarlo con Figma. Enlace: {{link}}"
        },
        "figma":{
          "tittle":"Figma",
          "text":"Figma es una herramienta de diseño colaborativo en línea que permite a equipos de diseño crear, editar y compartir proyectos de diseño de manera eficiente. Facilita la colaboración en tiempo real y elimina las barreras geográficas, lo que la convierte en una elección popular para diseñadores de todo el mundo."
        },
        "npm":{
          "tittle":"NPM",
          "text":"NPM (Node Package Manager) es una herramienta esencial en el ecosistema de desarrollo de JavaScript. Permite a los desarrolladores instalar, gestionar y compartir paquetes de código reutilizable de manera sencilla. Con NPM, se pueden descargar bibliotecas y módulos de JavaScript, simplificando el desarrollo de aplicaciones web y de servidor."
        }
      }
}
