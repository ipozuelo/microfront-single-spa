{
  "nav": {
    "home": "Home",
    "about": "About me",
    "team": "Team",
    "web": "Web",
    "incidents": "Incidents",
    "library": "Library",
    "tools": "Tools"
  },
  "team":{
    "tittle":"Frontend Team"

  },
  "about": {
    "tittle": "About me",
    "init_text":"Hello everyone! I'm Israel, and I'm thrilled to be part of the front-end development team. For me, this is more than just a job; it's an exciting opportunity to dive into the world of web development and learn something new every day. My motivation is high, and I'm ready to tackle challenges and grow with this amazing team. I'm eager to contribute and learn together on this exciting journey!",
    "contact":"If you have any questions regarding the website, you can contact me via Teams or email: ",
    "name":"Full name: Israel Pozuelo Mart√≠n.",
    "email":"Email: ipozuelo@emeal.nttdata.com"
  },
  "home": {
    "tittle": "Welcome to our website created with Single SPA Microfrontends technology!",
    "init": "In this innovative website, we have adopted the microfrontends architecture using Single SPA to provide you with a modern and seamless web experience.",
    "box": "Have you ever wondered how different standalone applications can come together to form a cohesive and collaborative website? Well, that's exactly what we have achieved here. Our focus on microfrontends allows us to develop, deploy, and maintain each part of the application independently, providing us with greater flexibility and ease of development. Each microfrontend is a small independent application that can be written in different frameworks or technologies, and yet, they all work seamlessly together on this website.",
    "final": "With Single SPA, we have achieved seamless navigation between different sections of the site, without having to wait for a completely new page to load. Additionally, this means that when we make improvements or updates to one part of the application, it will not negatively affect other parts, resulting in a more robust and easy-to-maintain site."
  },
  "web": {
    "tittle": "Web Development",
    "first": "First Steps",
    "start_text": "What is the microfrontends approach and Single-spa? Instead of building a monolithic application where all components are tightly coupled, we adopt a modular approach by dividing our application into multiple independent microfrontends. Each microfrontend is responsible for a specific part of the application and is developed, tested, and deployed independently. This allows us to leverage the benefits of different technologies and teams, promoting collaboration and efficiency.",
    "next_text": "Single-spa is a JavaScript library that helps us integrate and coordinate these microfrontends into a single application. It acts as an orchestrator, allowing us to dynamically load and unload modules as needed, optimizing performance and enhancing the user experience.",
    "stencil": {
      "init_text": "Stencil JS is an open-source web development framework created by the Ionic team. Its primary goal is to simplify the creation of reusable and high-performance web components. Stencil JS is focused on developing web applications and web components using the latest features and standards of modern web development.",
      "tittle_isntall_stencil": "Installation and Project Creation",
      "li_first_step": "Make sure you have Node.js installed on your computer. You can download Node.js from the official website:",
      "li_second_step": "Open a terminal or command prompt on your computer.",
      "li_third_step": "Install the Stencil JS CLI globally by running the following command:",
      "text_create_proyect": "Once you have installed the Stencil.js CLI, you can create a new project by running the following command:",
      "text_create_webcomponent": "To create new web components, you can execute the following command:",
      "text_ejecute_stencil": "To run your Stencil.js project, execute the following command in the console:",
      "text_public_npm": "Once you have developed all your web components with Stencil.js, the next step is to publish them to npm (Node Package Manager) so that you can use them in other web technologies like Angular, React, or Vue. Here are the general steps to publish your Stencil.js web components:",
      "text_public_code_npm": "To publish them, you need to register on the official NPM website, and once registered, execute the following commands:"
    },
    "single_spa": {
      "init_text": "Single-spa is a JavaScript library that enables the creation of single-page web applications (SPAs) from multiple independent applications or microfrontends. The central idea of Single-spa is that each microfrontend can be developed with a different framework or technology, such as Angular, React, Vue.js, or any other of your choice.",
      "text_create_root": "To begin creating your Single-SPA microfrontend application, you can start with the following command:",
      "text_finish": "Within this command, there are various configurations that we will explore to create microfrontends in React, Vue, or Angular, among others."
    },
    "root": {
      "init_text": "The root app acts as a \"container\" that manages the navigation, loading, and unloading of secondary microfrontends as needed. It can also be responsible for authentication, routing, and global state management of the application. In summary, the root app establishes the context and overall structure of your microfrontends application, allowing secondary applications to integrate and work together to provide a cohesive user experience.",
      "ol_text": "When running the \"create-single-spa\" command, you need to select a series of options to ensure that the application is created correctly:",
      "li_first_step": "You need to select the directory in which the application will be created.",
      "li_second_step": "Then, you need to select the third option, which says \"single-spa root config\"",
      "li_third_step": "Afterward, you select the package manager you want to use, in this case, I have used npm.",
      "li_for_step": "It also provides the option to use TypeScript. For this application, TypeScript has not been used in the root application.",
      "li_five_step": "Finally, you select \"yes\" to use the single-spa Layout Engine.",
      "finish_ol": "And that's it, the root application of the project has been generated. Now, you need to make some modifications to prepare the application.",
      "text_first_modification": "The first modification we'll make is editing the import map in the \"index.ejs\" file to move all the imports of the microfrontends to a separate .json file for easier management and editing. So, the first thing we'll do is create this \"importmap.json\" file in the src directory. To start, it should have the following structure since we haven't added a microfrontend yet.",
      "text_first_modification_2": "Next, we need to edit the \"index.ejs\" file to link the \"importmap.json\" file we've created with the application. To do this, replace the default structure provided (line 47) with this line of code:",
      "text_first_modification_3": "Finally, you need to modify the \"webpack.config.js\" file to ensure that everything works correctly and the \"importmap.json\" is linked. This modification involves adding a plugin to the configuration.",
      "text_second_modification": "Now, the second modification we will make is to add our Web Components package. We will do this using the npm package that we created earlier with a CDN link. You just need to add a line of code in the \"index.ejs\" file, and all microfrontends will be able to use any available web component. (Please disregard the version of the NPM package in the image.)",
      "text_second_modification_1": "With these steps completed, your root application should be ready to go. The next steps involve creating the microfrontends and adding them to the \"importmap.json\" file. To run the project, use the following command (note that it may conflict with ports since it runs on localhost:9000):"
    },

    "react": {
      "text_init": "The combination of React with Single-SPA enables the development of microfrontends using React as the primary framework for each microfrontend. Each React microfrontend can be developed independently by separate teams, facilitating collaboration and iterative development. These individual parts can then be compiled and packaged in a way that seamlessly integrates them into the overall application managed by Single-SPA.",
      "text_ejecute_comand": "Execute the following command to create a React microfrontend with the dependencies and packages required for the Single-SPA framework",
      "text_finish": "This will generate a project with a basic React component that is very easy to modify. React has been used for developing the navigation bar between different screens on this website. To run the React microfrontend, you need to enter the following command in the terminal:"
    },
    "angular": {
      "text_init": "The combination of Angular with Single-spa enables the development of microfrontends using Angular as the primary framework for each module. Each Angular microfrontend can be developed independently by separate teams, facilitating collaboration and scalability in large projects.",
      "text_config_main": "To configure an Angular microfrontend correctly, once you've created the project, you need to open the \"main.single-spa.ts\" file, and it should look like the image with the lines causing errors due to the \"environment\" import removed.",
      "text_route": "Next, you need to add the \"empty-route\" module generated with the microfrontend to the \"app-routing.module.ts\" file. The file should look exactly like the image provided."
    },
    "vue": {
      "text_init": "Vue.js in Single-spa for microfrontends enables the creation of modular and scalable web applications with optimal performance. Vue.js seamlessly integrates, making development and team collaboration easy while ensuring efficient module loading when needed. You can create a Vue microfrontend application with the following command.",
      "text_edit_config": "Once you've created the Vue project, you need to edit the \"vue.config.js\" file to ensure your application works correctly. The only thing you need to do is add a WebPack configuration to make the microfrontend display smoothly. You would add the following code:",
      "text_finish_edit": "After this, your Vue application should work correctly, and you can edit the project as if it were an independent Vue app.",
      "text_ejecute_proyect": "To run the microfrontend and use it in the \"root\" application, you would execute it with the following command:"
    },
    "server_express":{
      "tittle":"Server Express",
      "text":"We are going to create a server to serve the static files to the web application, making it easier to modify or upload files without the need to recompile the entire project.",
      "text_2":"First we are going to create a folder with the name of the server and execute some commands to create a node project. Once this is done, two libraries will be added so that the server can start correctly.",
      "text_3":"Once finished, the \"index.js\" file is created where all the server configuration will be written inside.",
      "text_4":"Now you can create the public folder to store any static files that you want to send to your web application through an external server.",
      "text_5":"Finally, on this server he added a file called \"build.js\" where the \"Style Dictionary\" library is used to create the CSS files that contain all the variables extracted from the .JSON generated by Figma Tokens. In this way, every time the server is run, all the css variables will be generated in case there is any change, therefore, in the \"package.json\" file the scripts section has been modified so that all the files are executed."
    }
  },
  "libraries":{
    "tittle":"Libraries and tecnologies",
    "init_text":"In the process of building this website, we have used a series of modern libraries and technologies that have allowed us to create an exceptional user experience and an attractive design. These tools and resources are essential to the operation and appearance of our platform.",
    "style_tittle":"Library Style Dictionary",
    "translate":{
      "translate_tittle":"i18n Translation libraries",
      "react":{
        "tittle":"React",
        "text":"First you have to install the library in the react project. To do this, execute this command:",
        "text_2":"Second, a file \"i18n.ts\" is created where certain configurations will be made in our internationalization system. To begin, we must extract the .JSON files where the translations divided by languages ‚Äã‚Äãare found on the express server that we have developed (explanation in the web section). For this reason, the react \"axios\" library has been used to extract the information from a url. Once we have the .JSON, we must create the i18n object by adding the files and the default language. The i18n object is then exported so that it can be used in the main react component.",
        "text_3":"All that remains is to use the i18n object within the code using the \".t\" function and within the parentheses write in quotes the identification of the literal that you want to translate from the .JSON file. An example would be: \"i18n.t(\"nav.home\")\" which returns the name of \"Home\" or \"Inicio\" depending on the language."
      },
      "vue":{
        "tittle":"Vue",
        "text_init":"First, you need to install the library in the Vue project. To do this, you run the following command:",
        "text_2":"Second, you need to modify the 'main.js' file. You create an i18n object to set a default language, in this case, Spanish. Then, you create the 'loadLanguage' function that receives the language of the page. In this method, the 'axios' library is used to extract the .JSON documents where translations are stored, similar to in React. Once the data is extracted, it is added to the i18n object using the 'setLocaleMessage' method. Finally, the i18n object is added to the appOptions.",
        "text_3":"Now, you just need to use the '$t()' function within the HTML, and inside the parentheses, provide the reference to the literal you want to translate from the .JSON file. For example:"
      },
      "angular":{
        "tittle":"Angular",
        "text_install":"First, you need to install the libraries in the Angular project. When using an older version of Angular, you need to install the compatible versions of the libraries. To do this, you run the following commands:",
        "text_2":"Second, you need to modify the 'app.module.ts' file and add a function that looks for the .JSON files containing translations in a URL. For this purpose, the following function is created:",
        "text_3":"Then, you need to add the 'TranslateModule' to the module's imports, including the function created earlier.",
        "text_4":"Third, a service is created with a constructor, importing the object from 'translate/core,' and a default language is set, in this case, Spanish. Then, the methods to be used are created. The first method is for changing the language. This method is used when loading the page and checks via localStorage which language is defined. The second method is used to translate a literal directly from the component to store it in a variable. After creating the file, you need to define it in the 'app.module.ts' in the 'providers' section to use it throughout the Angular app.",
        "text_5":"Finally, you can now translate any literal defined in the .JSON files. You just need to go to the HTML and add the 'translate' attribute to the HTML tag. For example:"
      }
     
    },
    "style_dicctionary":{
      "tittle":"Style Dictionary library",
      "text_init":"The Style Dictionary library allows us to use design tokens to define styles and use them on different platforms, such as HTML, CSS, JS, iOS, Android. It is available both as a CLI and as a separate module to expand its functionality.",
      "text_2":"The most common problem is defining a design system, and every time you want to make a change, you have to modify them individually on all platforms. Style Dictionary solves this by keeping the defined styles from a single source, eliminating errors and improving workflow efficiency.",
      "text_3":"In this case, a separate module has been created to generate multiple CSS files broken down into variable types. To do this, tokens are designed in Figma. Once they are created, they are linked to a repository to bring them into an application, from which a .JSON file with all the defined tokens is generated. Once you have the token file, you need to create the 'build.js' file to construct the CSS files. This would be a simple example of how to generate a CSS file in a specific location, filtering out color variables that do not belong to the dark mode of the design system.",
      "text_4":"Now, this can be customized in any way to break down styles in a thousand different ways, adapting them to the application's needs. Another example is the customFormat that was designed to create CSS border variables. The issue here is that we receive an object from the tokens, and we need to take each element of the object and combine them into a single 'border' attribute, thus achieving a single 'border' property. They are also split depending on the border colors to differentiate between light mode and dark mode."
    },
    "storybook":{
      "tittle":"StoryBook",
      "text_init":"Storybook is an open-source development tool that allows developers to create and view user interface components in isolation, making their development, testing, and documentation easier. It is widely used in web application development and enables development teams to work on components independently before integrating them into the main application.",
      "text_2":"Storybook provides an interactive user interface for viewing and testing components, making collaboration and early detection of visual and usability issues easier.",
      "text_3":"In this project, it has been used to visualize the different web components developed in Stencil.js in a clearer way."
    }
  },
  "tools":{
    "tittle":"Tools",
    "text_init":"In this section, we will explore the various tools I have used to develop the website.",
    "git_hub":{
      "tittle":"GitHub",
      "text":"GitHub is a collaborative development platform that enables teams of programmers to efficiently manage software projects. It provides version control, issue tracking, and facilitates collaboration on source code, all in an online environment accessible from anywhere.",
      "text_2":"In this case, all the code has been stored in a repository for easy access and to connect it with Figma. Link: "
    },
    "figma":{
      "tittle":"Figma",
      "text":"Figma is an online collaborative design tool that allows design teams to efficiently create, edit, and share design projects. It facilitates real-time collaboration and eliminates geographical barriers, making it a popular choice for designers worldwide.",
      "text_2":"For this website, Figma has been used to create the Design System and link Figma tokens with the web. To achieve this, the \"Tokens Studio for Figma\" extension was used, which allows you to create various tokens and then send them to a GitHub repository. In the plugin settings section, it is linked to a GitHub repository, and every time a change is made to the tokens, a commit and push should be performed. This action generates a .JSON file in the repository with all the organized tokens."
    },
    "npm":{
      "tittle":"NPM",
      "text":"NPM (Node Package Manager) is an essential tool in the JavaScript development ecosystem. It enables developers to easily install, manage, and share reusable code packages. With NPM, you can download JavaScript libraries and modules, simplifying the development of web and server applications.",
      "text_2":"When using the web components designed in Stencil.js, NPM has been used to upload the package containing all the components. Subsequently, they are linked to the root application through a Content Delivery Network (CDN), in this case, \"jsDelivr\". In the root application, the file containing all the components and the CSS file with all the global variables used are added."
    }
  }
}
