{
  "nav": {
    "home": "Home",
    "information": "Frontend Team",
    "team": "Team",
    "web": "Web",
    "incidents": "Incidents",
    "library": "Library",
    "tools": "Tools"
  },
  "about": {
    "tittle": "About us"
  },
  "home": {
    "tittle": "Welcome to our website created with Single SPA Microfrontends technology!",
    "init": "In this innovative website, we have adopted the microfrontends architecture using Single SPA to provide you with a modern and seamless web experience.",
    "box": "Have you ever wondered how different standalone applications can come together to form a cohesive and collaborative website? Well, that's exactly what we have achieved here. Our focus on microfrontends allows us to develop, deploy, and maintain each part of the application independently, providing us with greater flexibility and ease of development. Each microfrontend is a small independent application that can be written in different frameworks or technologies, and yet, they all work seamlessly together on this website.",
    "final": "With Single SPA, we have achieved seamless navigation between different sections of the site, without having to wait for a completely new page to load. Additionally, this means that when we make improvements or updates to one part of the application, it will not negatively affect other parts, resulting in a more robust and easy-to-maintain site."
  },
  "web": {
    "tittle": "Web Development",
    "first": "First Steps",
    "start_text": "What is the microfrontends approach and Single-spa? Instead of building a monolithic application where all components are tightly coupled, we adopt a modular approach by dividing our application into multiple independent microfrontends. Each microfrontend is responsible for a specific part of the application and is developed, tested, and deployed independently. This allows us to leverage the benefits of different technologies and teams, promoting collaboration and efficiency.",
    "next_text": "Single-spa is a JavaScript library that helps us integrate and coordinate these microfrontends into a single application. It acts as an orchestrator, allowing us to dynamically load and unload modules as needed, optimizing performance and enhancing the user experience.",
    "stencil": {
      "init_text": "Stencil JS is an open-source web development framework created by the Ionic team. Its primary goal is to simplify the creation of reusable and high-performance web components. Stencil JS is focused on developing web applications and web components using the latest features and standards of modern web development.",
      "tittle_isntall_stencil": "Installation and Project Creation",
      "li_first_step": "Make sure you have Node.js installed on your computer. You can download Node.js from the official website:",
      "li_second_step": "Open a terminal or command prompt on your computer.",
      "li_third_step": "Install the Stencil JS CLI globally by running the following command:",
      "text_create_proyect": "Once you have installed the Stencil.js CLI, you can create a new project by running the following command:",
      "text_create_webcomponent": "To create new web components, you can execute the following command:",
      "text_ejecute_stencil": "To run your Stencil.js project, execute the following command in the console:",
      "text_public_npm": "Once you have developed all your web components with Stencil.js, the next step is to publish them to npm (Node Package Manager) so that you can use them in other web technologies like Angular, React, or Vue. Here are the general steps to publish your Stencil.js web components:",
      "text_public_code_npm": "To publish them, you need to register on the official NPM website, and once registered, execute the following commands:"
    },
    "single_spa": {
      "init_text": "Single-spa is a JavaScript library that enables the creation of single-page web applications (SPAs) from multiple independent applications or microfrontends. The central idea of Single-spa is that each microfrontend can be developed with a different framework or technology, such as Angular, React, Vue.js, or any other of your choice.",
      "text_create_root": "To begin creating your Single-SPA microfrontend application, you can start with the following command:",
      "text_finish": "Within this command, there are various configurations that we will explore to create microfrontends in React, Vue, or Angular, among others."
    },
    "root": {
      "init_text": "The root app acts as a \"container\" that manages the navigation, loading, and unloading of secondary microfrontends as needed. It can also be responsible for authentication, routing, and global state management of the application. In summary, the root app establishes the context and overall structure of your microfrontends application, allowing secondary applications to integrate and work together to provide a cohesive user experience.",
      "ol_text": "When running the \"create-single-spa\" command, you need to select a series of options to ensure that the application is created correctly:",
      "li_first_step": "You need to select the directory in which the application will be created.",
      "li_second_step": "Then, you need to select the third option, which says \"single-spa root config\"",
      "li_third_step": "Afterward, you select the package manager you want to use, in this case, I have used npm.",
      "li_for_step": "It also provides the option to use TypeScript. For this application, TypeScript has not been used in the root application.",
      "li_five_step": "Finally, you select \"yes\" to use the single-spa Layout Engine.",
      "finish_ol": "And that's it, the root application of the project has been generated. Now, you need to make some modifications to prepare the application.",
      "text_first_modification": "The first modification we'll make is editing the import map in the \"index.ejs\" file to move all the imports of the microfrontends to a separate .json file for easier management and editing. So, the first thing we'll do is create this \"importmap.json\" file in the src directory. To start, it should have the following structure since we haven't added a microfrontend yet.",
      "text_first_modification_2": "Next, we need to edit the \"index.ejs\" file to link the \"importmap.json\" file we've created with the application. To do this, replace the default structure provided (line 47) with this line of code:",
      "text_first_modification_3": "Finally, you need to modify the \"webpack.config.js\" file to ensure that everything works correctly and the \"importmap.json\" is linked. This modification involves adding a plugin to the configuration.",
      "text_second_modification": "Now, the second modification we will make is to add our Web Components package. We will do this using the npm package that we created earlier with a CDN link. You just need to add a line of code in the \"index.ejs\" file, and all microfrontends will be able to use any available web component. (Please disregard the version of the NPM package in the image.)",
      "text_second_modification_1": "With these steps completed, your root application should be ready to go. The next steps involve creating the microfrontends and adding them to the \"importmap.json\" file. To run the project, use the following command (note that it may conflict with ports since it runs on localhost:9000):"
    },

    "react": {
      "text_init": "The combination of React with Single-SPA enables the development of microfrontends using React as the primary framework for each microfrontend. Each React microfrontend can be developed independently by separate teams, facilitating collaboration and iterative development. These individual parts can then be compiled and packaged in a way that seamlessly integrates them into the overall application managed by Single-SPA.",
      "text_ejecute_comand": "Execute the following command to create a React microfrontend with the dependencies and packages required for the Single-SPA framework",
      "text_finish": "This will generate a project with a basic React component that is very easy to modify. React has been used for developing the navigation bar between different screens on this website. To run the React microfrontend, you need to enter the following command in the terminal:"
    },
    "angular": {
      "text_init": "The combination of Angular with Single-spa enables the development of microfrontends using Angular as the primary framework for each module. Each Angular microfrontend can be developed independently by separate teams, facilitating collaboration and scalability in large projects.",
      "text_config_main": "To configure an Angular microfrontend correctly, once you've created the project, you need to open the \"main.single-spa.ts\" file, and it should look like the image with the lines causing errors due to the \"environment\" import removed.",
      "text_route": "Next, you need to add the \"empty-route\" module generated with the microfrontend to the \"app-routing.module.ts\" file. The file should look exactly like the image provided."
    },
    "vue": {
      "text_init": "Vue.js in Single-spa for microfrontends enables the creation of modular and scalable web applications with optimal performance. Vue.js seamlessly integrates, making development and team collaboration easy while ensuring efficient module loading when needed. You can create a Vue microfrontend application with the following command.",
      "text_edit_config": "Once you've created the Vue project, you need to edit the \"vue.config.js\" file to ensure your application works correctly. The only thing you need to do is add a WebPack configuration to make the microfrontend display smoothly. You would add the following code:",
      "text_finish_edit": "After this, your Vue application should work correctly, and you can edit the project as if it were an independent Vue app.",
      "text_ejecute_proyect": "To run the microfrontend and use it in the \"root\" application, you would execute it with the following command:"
    }
  }
}
